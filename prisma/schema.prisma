// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model verificationCodeToEmail {
  id Int @id @default(autoincrement())

  verification_code String
  email             String

  @@map("varification_code_to_email")
}

model User {
  id Int @id @default(autoincrement())

  username      String  @unique
  email         String  @unique
  nickname      String? @default("Псевдоним")
  hash          String
  refresh_token String?
  role          String  @default("user")
  image_url String

  restore_password_link_id String?

  songs             Song[]
  owned_playlists   Playlist[]               @relation("owned_playlists")
  categories        Category[]
  blacklisted_songs Users_BlacklistedSongs[]

  createdAt DateTime @default(now())

  users_to_playlists users_to_playlists[]

  @@map("users")
}

model blacklisted_refresh_tokens {
  id    Int    @id @default(autoincrement())
  token String

  @@map("blacklisted_refresh_tokens")
}

model Playlist {
  id Int @id @default(autoincrement())

  name String

  owner_id Int?
  owner    User? @relation(fields: [owner_id], references: [id], onDelete: SetNull, name: "owned_playlists")

  image_url String
  is_album Boolean @default(false)

  chart_name              String?                   @unique
  chart                   Chart?                    @relation(fields: [chart_name], references: [chart_page])
  users_to_playlists      users_to_playlists[]
  songs_to_playlists      songs_to_playlists[]
  playlists_to_categories playlists_to_categories[]

  @@map("playlists")
}

enum Genre {
  hipHop
  pop
  rap
}

enum Mood {
  calm
  cheerful
  sad
}

enum Language {
  russian
  english
  nowords
}

model Song {
  id Int @id @default(autoincrement())

  name   String
  url    String
  author String
  album  String?

  genre    Genre?
  mood     Mood?
  language Language?

  image_url String

  owner_id Int?
  owner    User? @relation(fields: [owner_id], references: [id], onDelete: SetNull)

  blacklisted_by     Users_BlacklistedSongs[]
  songs_to_playlists songs_to_playlists[]

  @@map("songs")
}

model Users_BlacklistedSongs {
  id Int @id @default(autoincrement())

  user_id Int
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  song_id Int
  song    Song @relation(fields: [song_id], references: [id], onDelete: Cascade)

  @@map("blacklisted_songs")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  owner_id Int?
  owner    User? @relation(fields: [owner_id], references: [id], onDelete: SetNull)

  playlists_to_categories playlists_to_categories[]
  categories_to_charts    categories_to_charts[]

  @@map("categories")
}

model Chart {
  id Int @id @default(autoincrement())

  chart_page String @unique

  trend_playlist       Playlist?
  categories_to_charts categories_to_charts[]

  @@map("charts")
}

model users_to_playlists {
  id Int @id @default(autoincrement())

  user_id Int
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  playlist_id Int
  playlist    Playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade)

  is_favorite Boolean @default(false)
  is_liked Boolean @default(false)

  order Int

  @@map("users_to_paylists")
}

model songs_to_playlists {
  id Int @id @default(autoincrement())

  song_id Int
  song    Song @relation(fields: [song_id], references: [id], onDelete: Cascade)

  playlist_id Int
  playlist    Playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade)

  order Int

  @@map("songs_to_playlists")
}

model playlists_to_categories {
  id Int @id @default(autoincrement())

  playlist_id Int
  playlist    Playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade)

  category_id Int
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  order Int

  @@map("playlists_to_categories")
}

model categories_to_charts {
  id Int @id @default(autoincrement())

  category_id Int
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  chart_id Int
  chart    Chart @relation(fields: [chart_id], references: [id], onDelete: Cascade)

  order Int

  @@map("categories_to_charts")
}
