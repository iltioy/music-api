// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id Int @id @default(autoincrement())

  user_id Int?  @unique
  user    User? @relation(fields: [user_id], references: [id])

  song_id Int?  @unique
  song    Song? @relation(fields: [song_id], references: [id])

  playlist_id Int?      @unique
  playlist    Playlist? @relation(fields: [playlist_id], references: [id])

  image_url String?
  image_key String?

  @@map("images")
}

model verificationCodeToEmail {
  id Int @id @default(autoincrement())

  verification_code String
  email String
}

model User {
  id Int @id @default(autoincrement())

  username String @unique
  email    String @unique
  hash     String
  refresh_token String?
  role String @default("user")

  image Image?

  restore_password_link_id String?
  
  added_playlists OrderedPlaylist[] @relation("added_playlists")
  liked_playlists OrderedPlaylist[] @relation("liked_playlists")

  songs     Song[] 
  owned_playlists Playlist[] @relation("owned_playlists")
  categories Category[]

  createdAt DateTime @default(now())

  @@map("users")
}

model blacklisted_refresh_tokens {
  id Int @id @default(autoincrement())
  token String
}

model Playlist {
  id Int @id @default(autoincrement())

  name String

  image Image?

  owner_id    Int?
  owner       User?    @relation(fields: [owner_id], references: [id], onDelete: SetNull, name: "owned_playlists")

  is_favorite Boolean @default(false)

  songs OrderedSong[]
  ordered_playlists OrderedPlaylist[]
  chart_name String? @unique
  chart Chart? @relation(fields: [chart_name], references: [chart_page])

  @@map("playlists")
}

enum Genre {
  hipHop
  pop
  rap
}

enum Mood {
  calm
  cheerful
  sad
}

enum Language {
  russian
  english
  nowords
}

model Song {
  id Int @id @default(autoincrement())

  name   String
  url    String
  author String
  album  String?

  genre Genre?
  mood Mood?
  language Language?

  image Image?

  owner_id Int?
  owner    User? @relation(fields: [owner_id], references: [id], onDelete: SetNull)

  playlist_songs OrderedSong[]
  @@map("songs")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  playlists OrderedPlaylist[]

  owner_id Int?
  owner User? @relation(fields: [owner_id], references: [id], onDelete: SetNull)

  ordered_category OrderedCategory[]

  @@map("categories")
}

model Chart {
  id Int @id @default(autoincrement())

  chart_page String @unique

  categories OrderedCategory[]
  trend_playlist Playlist?
}

model OrderedSong {
  id Int @id @default(autoincrement())

  playlist_id Int
  playlist Playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade)

  order Int 

  song_id Int?
  song Song? @relation(fields: [song_id], references: [id], onDelete: Cascade)
}

model OrderedPlaylist {
  id Int @id @default(autoincrement())

  category_id Int?
  category Category? @relation(fields: [category_id], references: [id], onDelete: SetNull)

  addded_users User[] @relation("added_playlists")
  liked_users User[] @relation("liked_playlists")

  order Int 

  playlist_id Int?
  playlist Playlist? @relation(fields: [playlist_id], references: [id], onDelete: Cascade)
}

model OrderedCategory {
  id Int @id @default(autoincrement())

  chart_page String
  chart Chart @relation(fields: [chart_page], references: [chart_page], onDelete: Cascade)

  order Int

  category_id Int?
  category Category? @relation(fields: [category_id], references: [id], onDelete: Cascade)
}