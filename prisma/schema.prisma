// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Image {
  id Int @id @default(autoincrement())

  user_id Int?  @unique
  user    User? @relation(fields: [user_id], references: [id])

  song_id Int?  @unique
  song    Song? @relation(fields: [song_id], references: [id])

  playlist_id Int?      @unique
  playlist    Playlist? @relation(fields: [playlist_id], references: [id])

  image_url String?
  image_key String?

  @@map("images")
}

model User {
  id Int @id @default(autoincrement())

  username String @unique
  email    String @unique
  hash     String
  refresh_token String?
  role String @default("user")

  image Image?

  restore_password_link_id String?

  songs     Song[]
  playlists Playlist[]
  categories Category[]

  createdAt DateTime @default(now())

  @@map("users")
}

model Playlist {
  id Int @id @default(autoincrement())

  name String

  image Image?

  owner_id    Int
  owner       User    @relation(fields: [owner_id], references: [id])

  is_favorite Boolean @default(false)

  songs OrderedSong[]
  categories OrderedPlaylist[]
  chart_name String? @unique
  chart Chart? @relation(fields: [chart_name], references: [chart_page])

  @@map("playlists")
}

model Song {
  id Int @id @default(autoincrement())

  name   String
  url    String
  author String
  album  String?

  image Image?

  owner_id Int
  owner    User @relation(fields: [owner_id], references: [id])

  playlist_songs OrderedSong[]
  @@map("songs")
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  playlists OrderedPlaylist[]

  owner_id Int
  owner User @relation(fields: [owner_id], references: [id])

  ordered_category OrderedCategory[]

  @@map("categories")
}

model Chart {
  id Int @id @default(autoincrement())

  chart_page String @unique

  categories OrderedCategory[]
  trend_playlist Playlist?
}

model OrderedSong {
  id Int @id @default(autoincrement())

  playlist_id Int
  playlist Playlist @relation(fields: [playlist_id], references: [id])

  order Int 

  song_id Int
  song Song @relation(fields: [song_id], references: [id])
}

model OrderedPlaylist {
  id Int @id @default(autoincrement())

  category_id Int
  category Category @relation(fields: [category_id], references: [id])

  order Int 

  playlist_id Int
  playlist Playlist @relation(fields: [playlist_id], references: [id])

  

}

model OrderedCategory {
  id Int @id @default(autoincrement())

  chart_id Int
  chart Chart @relation(fields: [chart_id], references: [id])

  order Int

  category_id Int
  category Category @relation(fields: [category_id], references: [id])
}