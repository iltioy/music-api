// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model verificationCodeToEmail {
  id Int @id @default(autoincrement())

  verification_code String
  email             String

  @@map("varification_code_to_email")
}

model User {
  id Int @id @default(autoincrement()) @map("id_пользователя")

  username      String  @unique @map("имя")
  nickname      String? @map("псевдоним")
  role          String  @default("user") @map("роль")
  email         String  @unique @map("email")
  image_url String  @map("фотография")

  hash          String  
  refresh_token String?
  restore_password_link_id String?

  songs             Song[]
  blacklisted_songs Users_BlacklistedSongs[]

  createdAt DateTime @default(now())

  users_to_playlists users_to_playlists[]

  @@map("Пользователи")
}

model blacklisted_refresh_tokens {
  id    Int    @id @default(autoincrement())
  token String

  @@map("blacklisted_refresh_tokens")
}

model Playlist {
  id Int @id @default(autoincrement()) @map("id_плейлиста")

  name String @map("название")
  image_url String @map("изображение")
  is_album Boolean @default(false) @map("флаг_альбома")

  users_to_playlists      users_to_playlists[]
  songs_to_playlists      songs_to_playlists[]
  playlists_to_categories playlists_to_categories[]
  Chart Chart[]

  @@map("Плейлисты")
}

enum Genre {
  hipHop
  pop
  rap
}

enum Mood {
  calm
  cheerful
  sad
}

enum Language {
  russian
  english
  nowords
}

model Song {
  id Int @id @default(autoincrement()) @map("id_трека")

  owner_id Int? @map("id_автора")
  owner    User? @relation(fields: [owner_id], references: [id], onDelete: SetNull)

  name   String @map("название")
  url    String @map("аудио")

  image_url String @map("изображение")

  blacklisted_by     Users_BlacklistedSongs[]
  songs_to_playlists songs_to_playlists[]

  @@map("Треки")
}

model Users_BlacklistedSongs {
  id Int @id @default(autoincrement())

  user_id Int
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  song_id Int
  song    Song @relation(fields: [song_id], references: [id], onDelete: Cascade)

  @@map("blacklisted_songs")
}

model Category {
  id   Int    @id @default(autoincrement()) @map("id_категории")
  name String @map("название")

  chart_id Int? @map("id_чарта")
  chart Chart? @relation(fields: [chart_id], references: [id], onDelete: Cascade)

  order Int @map("порядок")

  playlists_to_categories playlists_to_categories[]

  @@map("Категории")
}

model Chart {
  id Int @id @default(autoincrement()) @map("id_чарта")

  chart_page String @unique

  trend_playlist_id       Int?
  trend_palylist Playlist? @relation(fields: [trend_playlist_id], references: [id], onDelete: SetNull)

  Category Category[]

  @@map("Чарты")
}

model users_to_playlists {
  id Int @id @default(autoincrement()) @map("id_пользователь_плейлист")

  user_id Int @map("id_пользователя")
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  playlist_id Int @map("id_плейлиста")
  playlist    Playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade)

  is_liked Boolean @default(false) @map("флаг_лайка")
  is_favorite Boolean @default(false) @map("флаг_любимого_плейлиста")
  is_owned Boolean @default(false) @map("флаг_владения_плейлистом")

  order Int @map("порядок")

  @@map("Пользователь_Плейлист")
}

model songs_to_playlists {
  id Int @id @default(autoincrement()) @map("id_плейлист_трек")

  song_id Int @map("id_трека")
  song    Song @relation(fields: [song_id], references: [id], onDelete: Cascade)

  playlist_id Int @map("id_плейлиста")
  playlist    Playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade)

  order Int @map("порядок")

  @@map("Плейлист_Трек")
}

model playlists_to_categories {
  id Int @id @default(autoincrement()) @map("id_категория_плейлист")

  playlist_id Int @map("id_плейлиста")
  playlist    Playlist @relation(fields: [playlist_id], references: [id], onDelete: Cascade)

  category_id Int @map("id_категории")
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  order Int @map("порядок")

  @@map("Категория_Плейлист")
}